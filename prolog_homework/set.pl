/* Предикаты для работы со множествами */

/* subset(M1, M2): множество M1 является подмножеством M2

Допустимые варианты использования:
* (i, i): проверяет, является ли M1 подмножеством множества M2
* (o, i): возвращает пустое множество M1
* (i, o): возвращает M2 = [M1 | <случайное число>]
* (o, o): возвращает M1 = [], M2 - не определен
*/
subset([], _):- !.
subset([H|T], M2):- member(H, M2), !, subset(T, M2).

/* subset_generate(M1, M2): множество M1 является подмножеством M2

Допустимые варианты использования:
* (o, i): генерирует все подмножества
* (o, o): недетреминированный вызов, M1 = [], M2 - любые списки

Недопустимые варианты использования:
* (i, i)
* (i, i)
*/
subset_generate([], []).
subset_generate(M1, [_|T2]):- subset_generate(M1, T2).
subset_generate([E|T1], [E|T2]):- subset_generate(T1, T2).

/* union(M1, M2, M3): множество M3 - объединение множеств M1 и M2

Допустимые варианты использования:
* (i, i, i): проверяет, является ли множество M3 объединением множеств M1 и M2
* (i, i, o): возвращает множество M3
* (i, o, o): M2 = [], M3 = M1
* (o, i, o): M1 = [], M3 = M2
* (o, o, o): возвращает 3 пустых списка

Недопустимые варианты использования:
* (i, o, i): возвращает false
* (o, i, i): возвращает false
* (o, o, i): возвращает false
*/
union(M1, M2, M3):- subset(M1, M3), subset(M2, M3), check(M1, M2, M3).
check(_, _, []):- !.
check(M1, M2, [H|T]):- member(H, M1), check(M1, M2, T), !; member(H, M2), check(M1, M2, T).
